// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
)

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms WHERE id = ?
`

// DeleteRoom
//
//	DELETE FROM rooms WHERE id = ?
func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const insertRoom = `-- name: InsertRoom :one
INSERT OR IGNORE INTO rooms (name, password) VALUES (?, ?) RETURNING id, name, password, currently_playing
`

type InsertRoomParams struct {
	Name     string
	Password string
}

// table: rooms
//
//	INSERT OR IGNORE INTO rooms (name, password) VALUES (?, ?) RETURNING id, name, password, currently_playing
func (q *Queries) InsertRoom(ctx context.Context, arg InsertRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, insertRoom, arg.Name, arg.Password)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CurrentlyPlaying,
	)
	return i, err
}

const selectCurrentVideoByRoomId = `-- name: SelectCurrentVideoByRoomId :one
SELECT video.uri, video.local FROM rooms
JOIN video ON rooms.currently_playing = video.id
WHERE rooms.id = ?
`

type SelectCurrentVideoByRoomIdRow struct {
	Uri   string
	Local bool
}

// SelectCurrentVideoByRoomId
//
//	SELECT video.uri, video.local FROM rooms
//	JOIN video ON rooms.currently_playing = video.id
//	WHERE rooms.id = ?
func (q *Queries) SelectCurrentVideoByRoomId(ctx context.Context, id int64) (SelectCurrentVideoByRoomIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectCurrentVideoByRoomId, id)
	var i SelectCurrentVideoByRoomIdRow
	err := row.Scan(&i.Uri, &i.Local)
	return i, err
}

const selectRoomById = `-- name: SelectRoomById :one
SELECT id, name, password, currently_playing FROM rooms WHERE id = ?
`

// SelectRoomById
//
//	SELECT id, name, password, currently_playing FROM rooms WHERE id = ?
func (q *Queries) SelectRoomById(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, selectRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CurrentlyPlaying,
	)
	return i, err
}

const selectRoomByName = `-- name: SelectRoomByName :one
SELECT id, name, password, currently_playing FROM rooms WHERE name = ?
`

// SelectRoomByName
//
//	SELECT id, name, password, currently_playing FROM rooms WHERE name = ?
func (q *Queries) SelectRoomByName(ctx context.Context, name string) (Room, error) {
	row := q.db.QueryRowContext(ctx, selectRoomByName, name)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CurrentlyPlaying,
	)
	return i, err
}

const selectRoomByNameWithPassword = `-- name: SelectRoomByNameWithPassword :one
SELECT id, name, password, currently_playing, password FROM rooms WHERE name = ?
`

type SelectRoomByNameWithPasswordRow struct {
	ID               int64
	Name             string
	Password         string
	CurrentlyPlaying *int64
	Password_2       string
}

// SelectRoomByNameWithPassword
//
//	SELECT id, name, password, currently_playing, password FROM rooms WHERE name = ?
func (q *Queries) SelectRoomByNameWithPassword(ctx context.Context, name string) (SelectRoomByNameWithPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, selectRoomByNameWithPassword, name)
	var i SelectRoomByNameWithPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.CurrentlyPlaying,
		&i.Password_2,
	)
	return i, err
}

const updateRoomNameById = `-- name: UpdateRoomNameById :exec
UPDATE rooms SET name = ? WHERE id = ?
`

type UpdateRoomNameByIdParams struct {
	Name string
	ID   int64
}

// UpdateRoomNameById
//
//	UPDATE rooms SET name = ? WHERE id = ?
func (q *Queries) UpdateRoomNameById(ctx context.Context, arg UpdateRoomNameByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRoomNameById, arg.Name, arg.ID)
	return err
}
