// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
)

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms WHERE id = ?
`

// DeleteRoom
//
//	DELETE FROM rooms WHERE id = ?
func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

// DeleteUser
//
//	DELETE FROM users WHERE id = ?
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const insertRoom = `-- name: InsertRoom :exec
INSERT INTO rooms (id, name) VALUES (?, ?)
`

type InsertRoomParams struct {
	ID   int64
	Name interface{}
}

// table: rooms
//
//	INSERT INTO rooms (id, name) VALUES (?, ?)
func (q *Queries) InsertRoom(ctx context.Context, arg InsertRoomParams) error {
	_, err := q.db.ExecContext(ctx, insertRoom, arg.ID, arg.Name)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, username) VALUES (?, ?) RETURNING id, username
`

type InsertUserParams struct {
	ID       int64
	Username string
}

// table: users
//
//	INSERT INTO users (id, username) VALUES (?, ?) RETURNING id, username
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const selectRoomById = `-- name: SelectRoomById :one
SELECT id, name FROM rooms WHERE id = ?
`

// SelectRoomById
//
//	SELECT id, name FROM rooms WHERE id = ?
func (q *Queries) SelectRoomById(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, selectRoomById, id)
	var i Room
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const selectRoomByName = `-- name: SelectRoomByName :one
SELECT id, name FROM rooms WHERE name = ?
`

// SelectRoomByName
//
//	SELECT id, name FROM rooms WHERE name = ?
func (q *Queries) SelectRoomByName(ctx context.Context, name interface{}) (Room, error) {
	row := q.db.QueryRowContext(ctx, selectRoomByName, name)
	var i Room
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const selectUserById = `-- name: SelectUserById :one
SELECT id, username FROM users WHERE id = ?
`

// SelectUserById
//
//	SELECT id, username FROM users WHERE id = ?
func (q *Queries) SelectUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const selectUserByName = `-- name: SelectUserByName :one
SELECT id, username FROM users WHERE username = ?
`

// SelectUserByName
//
//	SELECT id, username FROM users WHERE username = ?
func (q *Queries) SelectUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByName, username)
	var i User
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const updateRoomNameById = `-- name: UpdateRoomNameById :exec
UPDATE rooms SET name = ? WHERE id = ?
`

type UpdateRoomNameByIdParams struct {
	Name interface{}
	ID   int64
}

// UpdateRoomNameById
//
//	UPDATE rooms SET name = ? WHERE id = ?
func (q *Queries) UpdateRoomNameById(ctx context.Context, arg UpdateRoomNameByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRoomNameById, arg.Name, arg.ID)
	return err
}

const updateUserNameById = `-- name: UpdateUserNameById :exec
UPDATE users SET username = ? WHERE id = ?
`

type UpdateUserNameByIdParams struct {
	Username string
	ID       int64
}

// UpdateUserNameById
//
//	UPDATE users SET username = ? WHERE id = ?
func (q *Queries) UpdateUserNameById(ctx context.Context, arg UpdateUserNameByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserNameById, arg.Username, arg.ID)
	return err
}
